// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model zone {
  id         Int          @unique @default(autoincrement())
  pincode    String       @unique
  district   String
  state      String
  serviceBoy serviceboy[]
}

model User {
  id          Int           @unique @default(autoincrement())
  first_name  String?
  last_name   String?
  email       String?
  phoneNumber String        @unique
  userId      appointment[]
  address     address[]
}

model appointment {
  id                      Int    @unique @default(autoincrement())
  patient_first_name      String
  patient_last_name       String
  patient_age             String
  gender                  Gender
  referring_doctor        String
  additional_phone_number String

  // check wether it is subscribed appointement or not
  IsSubscriptionBased Boolean @default(false)

  // status 
  status Status @default(SCHEDULED)

  // user id
  userId         Int?
  booked_by_user User? @relation(fields: [userId], references: [id])

  // partners
  partnerId         Int?
  booked_by_partner partners? @relation(fields: [partnerId], references: [id])

  // service id 
  service_id Int
  serviceId  services @relation(fields: [service_id], references: [id])

  // service boy
  acceptedBy Int?
  serviceBoy serviceboy? @relation(fields: [acceptedBy], references: [id])

  // address
  addressId Int
  address   address @relation(fields: [addressId], references: [id])

  // report
  isReportUploaded Boolean @default(false)
  reportName       String?

  // payment
  isPaid        Boolean @default(false)
  modeOfPayment Mode    @default(cash)

  // adminAccepted 
  isRecivesByAdmin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model address {
  id                   Int           @unique @default(autoincrement())
  area                 String
  landmark             String
  pincode              String
  district             String
  state                String
  lat                  String
  lng                  String
  
  userId               Int?
  affilatedTo          User?          @relation(fields: [userId], references: [id])

  address              appointment[]
  address_subscription partners[]
}

model services {
  id                     Int                     @unique @default(autoincrement())
  title                  String
  price                  String
  banner_url             String
  serviceId              appointment[]
  serviceId_subscription subscription[]
  subscription_purchase  subscription_purchase[]
}

model serviceboy {
  id          Int           @unique @default(autoincrement())
  first_name  String
  last_name   String
  phoneNumber String        @unique
  email       String
  password    String
  zoneId      Int
  status      Boolean       @default(false)
  zone        zone          @relation(fields: [zoneId], references: [id])
  appointment appointment[]
}

model admin {
  id         Int    @unique @default(autoincrement())
  first_name String
  last_name  String
  email      String @unique
  password   String
}

model subscription {
  id               Int      @unique @default(autoincrement())
  subscriptionName String
  price            String
  numberOfTimes    Int
  serviceId        Int
  service          services @relation(fields: [serviceId], references: [id])
  benefits         String
}

model partners {
  id                    Int                     @unique @default(autoincrement())
  hospitalName          String
  email                 String
  phoneNumber            String                  @unique
  password              String
  subscription_purchase subscription_purchase[]
  partnerId             appointment[]
  // address
  addressId             Int
  address               address                 @relation(fields: [addressId], references: [id])
}

model subscription_purchase {
  id             Int      @unique @default(autoincrement())
  partnersId     Int
  partners       partners @relation(fields: [partnersId], references: [id])
  noOfCouponLeft Int
  purchasedAt    DateTime @default(now())
  serviceId      Int
  service        services @relation(fields: [serviceId], references: [id])
}

enum Gender {
  Male
  Female
  Other
}

enum Status {
  SCHEDULED // The appointment is scheduled but not yet confirmed.
  ACCEPTED // The appointment has been confirmed.
  COMPLETED // The appointment is finished.
  CANCELLED // The appointment was cancelled.
}

enum Mode {
  cash
  razorpay
  subscriptionBased
}
