// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model zone {
  id       Int    @unique @default(autoincrement())
  pincode  String @unique
  district String
  state    String

  services services[]
  partners partners[]
}

model services {
  id                 Int     @unique @default(autoincrement())
  title              String
  price              String
  banner_url         String?
  isHomeServiceAvail Boolean

  // in which zone available
  zoneId Int
  zone   zone @relation(fields: [zoneId], references: [id])

  // diagnosis id / partner id
  partnerId Int
  partner   partners @relation(fields: [partnerId], references: [id])

  serviceId appointment[]
}

model partners {
  id           Int    @unique @default(autoincrement())
  hospitalName String
  email        String
  phoneNumber  String @unique
  password     String
  imageUrl     String?

  zoneId Int
  zone   zone @relation(fields: [zoneId], references: [id])

  // address
  addressId Int
  address   address @relation(fields: [addressId], references: [id])

  isSubscribed Boolean @default(false)

  amount Int @default(0)

  subscription_purchase subscription_purchase[]
  // services 
  services              services[]
  serviceBoy            serviceboy[]
  appointment           appointment[]
  withdraw              withdraw[]
  paymentMethod         paymentMethod[]
}

model paymentMethod {
  id            Int        @unique @default(autoincrement())
  
  bankName      String
  accountNumber String
  ifscCode      String
  bankeeName    String
  withdraw      withdraw[]


  partnerId     Int?
  partner       partners?   @relation(fields: [partnerId], references: [id])

  doctorId      Int?    @unique
  doctor        doctor? @relation(fields: [doctorId], references: [id])
}

model withdraw {
  id              Int            @unique @default(autoincrement())
  
  amount          Int
  status          withdrawStatus @default(PENDING)
  paymentMethodId Int
  paymentMethod   paymentMethod  @relation(fields: [paymentMethodId], references: [id])
  createdAt       DateTime       @default(now())

  // partner withdraw 
  partnerId       Int?
  partner         partners?       @relation(fields: [partnerId], references: [id])

  // doctor withdraw
  doctorId Int?
  doctor   doctor? @relation(fields: [doctorId], references: [id])
}

model User {
  id          Int           @unique @default(autoincrement())
  first_name  String?
  last_name   String?
  email       String?
  phoneNumber String        @unique
  userId      appointment[]
  address     address[]
  patient     patient[]

  doctorappointment doctorappointment[]
}

model appointment {
  id                      Int    @unique @default(autoincrement())
  patient_first_name      String
  patient_last_name       String
  patient_age             String
  gender                  Gender
  referring_doctor        String
  additional_phone_number String

  // status 
  status Status @default(SCHEDULED)

  // user id
  userId         Int
  booked_by_user User @relation(fields: [userId], references: [id])

  partnerId Int
  partner   partners @relation(fields: [partnerId], references: [id])

  // service id 
  service_id Int
  serviceId  services @relation(fields: [service_id], references: [id])

  // service boy
  acceptedBy Int?
  serviceBoy serviceboy? @relation(fields: [acceptedBy], references: [id])

  // address
  addressId Int?
  address   address? @relation(fields: [addressId], references: [id])

  // report
  isReportUploaded Boolean @default(false)
  reportName       String?

  // payment
  isPaid        Boolean @default(false)
  modeOfPayment Mode    @default(cash)

  // adminAccepted 
  isRecivesByPartner Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model address {
  id       Int    @unique @default(autoincrement())
  area     String
  landmark String
  pincode  String
  district String
  state    String
  lat      String
  lng      String

  userId      Int?
  affilatedTo User? @relation(fields: [userId], references: [id])

  address              appointment[]
  address_subscription partners[]
}

model serviceboy {
  id          Int     @unique @default(autoincrement())
  first_name  String
  last_name   String
  phoneNumber String  @unique
  email       String
  password    String
  status      Boolean @default(false)

  isActive    Boolean       @default(true)
  partnerId   Int
  partner     partners      @relation(fields: [partnerId], references: [id])
  appointment appointment[]
}

model admin {
  id         Int    @unique @default(autoincrement())
  first_name String
  last_name  String
  email      String @unique
  password   String
}

model subscription {
  id                    Int                     @unique @default(autoincrement())
  subscriptionName      String
  price                 String
  timePeriod            Int
  benefits              String
  numberOfServiceBoys   Int
  subscription_purchase subscription_purchase[]
}

model subscription_purchase {
  id Int @unique @default(autoincrement())

  // to who it belong to
  partnersId             Int      @unique
  partners               partners @relation(fields: [partnersId], references: [id])
  numberOfServiceBoyLeft Int

  // to manage time
  purchasedAt    DateTime      @default(now())
  expiresAt      DateTime
  renewedAt      DateTime?
  subscriptionId Int? // remove the option when its prod
  subscription   subscription? @relation(fields: [subscriptionId], references: [id]) // remove the option when its prod
}

model homeBanner{
  id Int @unique @default(autoincrement())
  imageName String
}


model doctor {
  id          Int     @unique @default(autoincrement())
  fName       String
  lName       String
  displayName String
  phoneNumber String  @unique
  email       String
  password    String
  imageUrl    String?

  // specialization
  specializationId Int
  specialization   specialization @relation(fields: [specializationId], references: [id])

  // verification details
  isVerified Boolean @default(false)
  isfeatured Boolean @default(false)

  // clinic details
  clinicName    String?
  clinicAddress String?

  // clinic location
  lat String?
  lng String?

  // wallet details
  amount Float @default(0)

  education     education[]
  experience    experience[]
  timings       timings[]
  paymentMethod paymentMethod?
  doctorappointment   doctorappointment[]
  withdraw      withdraw[]
}

model education {
  id             Int    @unique @default(autoincrement())
  courseName     String
  universityName String
  yearOfPassing  Int

  doctorId Int
  doctor   doctor @relation(fields: [doctorId], references: [id])
}

model experience {
  id               Int     @unique @default(autoincrement())
  title            String
  hospital         String
  employmentType   String
  from             String
  to               String?
  currentlyWorking Boolean @default(false)
  doctorId         Int
  doctor           doctor  @relation(fields: [doctorId], references: [id])
}

model timings {
  id          Int     @unique @default(autoincrement())
  day         String
  startTime   String? @default("10:00")
  endTime     String? @default("17:00")
  isAvailable Boolean @default(true)

  fee Int? @default(0)

  doctorId Int
  doctor   doctor @relation(fields: [doctorId], references: [id])

  slots slots[]
}

model slots {
  id        Int    @unique @default(autoincrement())
  startTime String @default("10:00")
  endTime   String @default("17:00")

  timingsId Int
  timings   timings @relation(fields: [timingsId], references: [id])

  doctorappointment doctorappointment[]
}



model doctorappointment {
  id                 Int    @unique @default(autoincrement())
  patientFirstName   String
  patientLastName    String
  patientAge         Int
  patientGender      Gender
  patientPhoneNumber String

  // user details
  userId   Int
  bookedBy User @relation(fields: [userId], references: [id])

  // doctor details
  doctorId Int
  doctor   doctor @relation(fields: [doctorId], references: [id])

  status DoctorStatus @default(SCHEDULED)

  // payment details
  rpzOrderId         String? @unique
  rpzRefundPaymentId String? @unique
  rpzPaymentId       String? @unique

  // timing details
  date          String
  slotId        Int
  slot          slots   @relation(fields: [slotId], references: [id])
  isRescheduled Boolean @default(false)

  // additional details
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // prescription details
  prescriptionUrl String?

  // video call id
  videoCallId  String?
}

model specialization {
  id       Int    @unique @default(autoincrement())
  key      String
  label    String
  imageUrl String

  doctor   doctor[]
  symptoms symptom[]
}

model symptom {
  id       Int    @unique @default(autoincrement())
  name     String
  imageUrl String

  specializationId Int
  specialization   specialization @relation(fields: [specializationId], references: [id])
}


model patient {
  id          Int    @unique @default(autoincrement())
  fname       String
  lname       String
  phoneNumber String
  email       String
  age         Int
  gender      Gender

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

enum Gender {
  Male
  Female
  Other
}

enum Status {
  SCHEDULED // The appointment is scheduled but not yet confirmed.
  ACCEPTED // The appointment has been confirmed.
  COMPLETED // The appointment is finished.
  CANCELLED // The appointment was cancelled.
}

enum DoctorStatus {
  SCHEDULED // The appointment is scheduled but not yet confirmed.
  ACCEPTED // The appointment has been confirmed.
  IN_PROGRESS // The appointment is currently happening.
  COMPLETED // The appointment is finished.
  CANCELLED // The appointment was cancelled.
}

enum Mode {
  cash
  razorpay
  subscriptionBased
}

enum withdrawStatus {
  PENDING
  SUCCESS
  REJECTED
}
